using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Unity.VisualScripting;
using UnityEngine;

public class MalwareScript : MonoBehaviour
{
    private float radius;
    private float startingRadius;
    private float speed;
    private float health;
    private float maxHealth;
    private float maxSpeed;
    private bool initialised = false;
    bool paused = false;

    private CircleCollider2D circleCollider;

    public void init(float speed, float radius, float health)
    {
        circleCollider = this.GetComponent<CircleCollider2D>();
        maxHealth = health;
        this.health = health;
        startingRadius = radius;
        this.transform.localScale = new Vector2(radius * 2, radius * 2);
        circleCollider.radius = radius * Constants.COLLIDER_SIZE_MULTIPLIER; //1.35 makes it more accurate
        initialised = true;
        this.speed = speed;
        maxSpeed = speed;
        return;
    }

    // Update is called once per frame
    void Update()
    {
        if(initialised & !paused)
        this.transform.Translate(-speed * Time.deltaTime, 0, 0);
        return;
        
    }

    public void Pause()
    {
        paused = true;
    }

    public void Resume()
    {
        paused = false;
    }

    void Start()
    {
        Rigidbody2D rb = gameObject.AddComponent<Rigidbody2D>();
        rb.bodyType = RigidbodyType2D.Kinematic;
    }

    public void knockback(int level)
    {
        speed = speed -= level;
        StartCoroutine(regainSpeed());
    }

    IEnumerator regainSpeed()
    {
        while(speed != maxSpeed)
        {
            if((speed += 3*Time.deltaTime) > maxSpeed)
            speed = maxSpeed;
            yield return new WaitForEndOfFrame();
        }
    }
    


    public void ReachedBase()
    {
        Player.GetInstance().UpdateHealth(-1);
        Disappear();
        return;
    }

    void TakeDamage()
    {
        health -= 1;
        if(health <= 0)
        {
            Disappear();
            Player.GetInstance().IncrementScores();
        }
        if(Player.GetInstance().GetUpgradesDict()[Constants.Upgrades.KNOCKBACK] > 0)
        {
            knockback(Player.GetInstance().GetUpgradesDict()[Constants.Upgrades.KNOCKBACK]);
        }
        radius = Constants.MINIMUM_RELATIVE_MALWARE_SIZE*startingRadius + 
        (1 - Constants.MINIMUM_RELATIVE_MALWARE_SIZE)*(health / maxHealth)*startingRadius; //shrink to a minimum of half the original size
        
        this.transform.localScale = new Vector2(radius * 2, radius * 2);
        circleCollider.radius = radius * Constants.COLLIDER_SIZE_MULTIPLIER; //1.35 makes it more accurate

    }
    
    private void OnTriggerEnter2D(Collider2D col)
    {
        if(col.gameObject.name == "leftWall")
        ReachedBase();

        if(col.gameObject.name == "Bullet(Clone)") //i dont think this is good practice, TODO research a better way
        {
            Destroy(col.gameObject);
            TakeDamage();
        }

        return;
    }

    void Disappear()
    {
        Destroy(gameObject);
        Destroy(this);
        return;
            }
}
