using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using Unity.VisualScripting;
using UnityEngine;

public class MalwareScript : MonoBehaviour
{
    protected float radius;
    protected float startingRadius;
    protected float speed;
    protected float health;
    protected float maxHealth;
    protected float maxSpeed;
    protected Player player;
    protected Color color;

    protected Controller controller;

    protected CircleCollider2D circleCollider;
    private System.Random rand = new System.Random();

    [SerializeField] private GameObject dollar;
    [SerializeField] private GameObject email;
    [SerializeField] private SpriteRenderer spriteRenderer;

    public void init(float speed, float radius, float health, Controller cont, Color color)
    {
        circleCollider = this.GetComponent<CircleCollider2D>();
        maxHealth = health;
        this.health = health;
        startingRadius = radius;
        this.radius = radius;
        this.transform.localScale = new Vector2(radius * 2, radius * 2);
        circleCollider.radius = radius * Constants.COLLIDER_SIZE_MULTIPLIER; //1.35 makes it more accurate
        if(speed > 4)
        speed = 4;
        this.speed = speed;
        maxSpeed = speed;
        controller = cont;
        player = Player.GetInstance();
        if(this.GetType() != typeof(Hacker))
        {
            dollar.SetActive(false);
            email.SetActive(false);
        }
        spriteRenderer.color = color;
        this.color = color;
        return;
    }

    // Update is called once per frame


    void Start()
    {
        Rigidbody2D rb = gameObject.AddComponent<Rigidbody2D>();
        rb.bodyType = RigidbodyType2D.Kinematic;
    }

    public void knockback(int level)
    {
        speed -= (level*2 + 2);
    }
    
    public void ReachedBase()
    {
        player.UpdateHealth(Constants.ENEMY_DAMAGE);
        Disappear();
        return;
    }

    protected void TakeDamage()
    {
        health -= Constants.BULLET_DAMAGE;
        if(health <= 0)
        {
            Disappear();
            player.IncrementScores();
        }
        radius = Constants.MINIMUM_RELATIVE_MALWARE_SIZE*startingRadius + 
        (1 - Constants.MINIMUM_RELATIVE_MALWARE_SIZE)*(health / maxHealth)*startingRadius; //shrink to a minimum of half the original size
        
        this.transform.localScale = new Vector2(radius * 2, radius * 2);
        circleCollider.radius = radius * Constants.COLLIDER_SIZE_MULTIPLIER; //1.35 makes it more accurate

    }
    
    private void OnTriggerEnter2D(Collider2D col)
    {
        if(col.gameObject.name == "leftWall")
        ReachedBase();

        if(col.gameObject.name == "Bullet(Clone)") //i dont think this is good practice, TODO research a better way
        {
            TakeDamage();
        }

        if(col.gameObject.name == "Firewall(Clone)")
        {
            speed = 0.3f;
        }

        if(col.gameObject.name == "Wiper(Clone)")
        {
            health = 1;
            TakeDamage();
        }

        return;
    }

    protected void Disappear()
    {
        gameObject.SetActive(false);
        controller.setMalwareAsInactive(this);
        Debug.Log(speed);
        return;
    }

    public virtual void Move()
    {
        this.transform.Translate(-speed * Time.deltaTime, 0, 0);

        if(speed != maxSpeed)
        {
            if((speed += 2*Time.deltaTime) > maxSpeed)
            speed = maxSpeed;
        }
    }

    public void SetActive(bool x)
    {
        gameObject.SetActive(x);
    }

    public void EnableDollar()
    {
        if(this.GetType() != typeof(Hacker))
        dollar.SetActive(true);
        return;
    }

    public void EnableEmail()
    {
        if(this.GetType() != typeof(Hacker))
        email.SetActive(true);
        return;
    }
}
